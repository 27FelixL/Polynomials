"""
Student information for this assignment:

On my honor, Felix Li, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: fl7449
"""


class Node:
    """
    A modified version of the Node class for linked lists (using proper class
    coding practices). Instead of a data instance variable, this node class has both
    a coefficient and an exponent instance variable, which is used to represent each
    term in a polynomial.
    """

    def __init__(self, coeff, exp, link=None):
        """
        Node Constructor for polynomial linked lists.

        Args:
        - coeff: The coefficient of the term.
        - exp: The exponent of the term.
        - link: The next node in the linked list.
        """
        self.coeff = coeff
        self.exp = exp
        self.next = link

    @property
    def coeff(self):
        """
        Getter method for the coefficient attribute.
        """
        return self.__coeff

    @coeff.setter
    def coeff(self, value):
        """
        Setter method for the coefficient attribute.
        """
        if value is None or isinstance(value, int):
            self.__coeff = value
        else:
            raise ValueError("Coefficient must be an integer or None.")

    @property
    def exp(self):
        """
        Getter method for the exponent attribute.
        """
        return self.__exp

    @exp.setter
    def exp(self, value):
        """
        Setter method for the exponent attribute.
        """
        if value is None or isinstance(value, int):
            self.__exp = value
        else:
            raise ValueError("Exponent must be an integer or None.")

    @property
    def next(self):
        """
        Getter method for the next attribute.
        """
        return self.__next

    @next.setter
    def next(self, value):
        """
        Setter method for the next attribute.
        """
        if value is None or isinstance(value, Node):
            self.__next = value
        else:
            raise ValueError("Next must be a Node instance or None.")

    def __str__(self):
        """
        String representation of each term in a polynomial linked list.
        """
        return f"({self.coeff}, {self.exp})"


class LinkedList:
    """Class for the assignment"""
    def __init__(self):
        # You are also welcome to use a sentinel/dummy node!
        # It is definitely recommended, which will we learn more
        # about in class on Monday 3/24. If you choose to use
        # a dummy node, comment out the self.head = None
        # and comment in the below line. We use None to make sure
        # if there is an error where you accidentally include the
        # dummy node in your calculation, it will throw an error.
        # self.dummy = Node(None, None)
        self.head = None
        self.dummy = Node(None, None)

    # Insert the term with the coefficient coeff and exponent exp into the polynomial.
    # If a term with that exponent already exists, add the coefficients together.
    # You must keep the terms in descending order by exponent.
    def insert_term(self, coeff, exp):
        """Insert a term into the polynomial linked list in descending exponent order."""
        if coeff == 0:
            return
        prev = self.dummy
        curr = self.dummy.next
        while curr and curr.exp > exp:
            prev = curr
            curr = curr.next
        if curr and curr.exp == exp:
            curr.coeff += coeff
            if curr.coeff == 0:
                prev.next = curr.next
            return
        new_node = Node(coeff, exp)
        prev.next = new_node
        new_node.next = curr
        if self.head == self.dummy.next or self.head is None:
            self.head = self.dummy.next

    def add(self, p):
        """Add two polynomials represented as linked lists."""
        result = LinkedList()
        curr1, curr2 = self.head, p.head
        prev = None
        while curr1 or curr2:
            if curr2 is None or (curr1 and curr1.exp > curr2.exp):
                new_node = Node(curr1.coeff, curr1.exp)
                curr1 = curr1.next
            elif curr1 is None or curr2.exp > curr1.exp:
                new_node = Node(curr2.coeff, curr2.exp)
                curr2 = curr2.next
            else:
                sum_coeff = curr1.coeff + curr2.coeff
                if sum_coeff == 0:
                    curr1, curr2 = curr1.next, curr2.next
                    continue
                new_node = Node(sum_coeff, curr1.exp)
                curr1, curr2 = curr1.next, curr2.next
            if prev:
                prev.next = new_node
            else:
                result.head = new_node
            prev = new_node
        return result

    def mult(self, p):
        """Multiplying"""
        result = LinkedList()
        temp_dict = {}
        current1 = self.dummy.next
        while current1:
            current2 = p.dummy.next
            while current2:
                new_exp = current1.exp + current2.exp
                new_coeff = current1.coeff * current2.coeff
                temp_dict[new_exp] = temp_dict.get(new_exp, 0) + new_coeff
                current2 = current2.next
            current1 = current1.next
        for exp in sorted(temp_dict.keys(), reverse=True):
            if temp_dict[exp] != 0:
                result.insert_term(temp_dict[exp], exp)
        return result

    def __str__(self):
        """String return"""
        if self.dummy.next is None:
            return ""
        terms = []
        current = self.dummy.next
        while current:
            terms.append(str(current))
            current = current.next
        return " + ".join(terms)

def main():
    """Main"""
    # read data from stdin (terminal/file) using input() and create polynomial p

    # read data from stdin (terminal/file) using input() and create polynomial q

    # get sum of p and q as a new linked list and print sum

    # get product of p and q as a new linked list and print product
    n = int(input())  # The number of terms for polynomial p
    p_terms = []
    for _ in range(n):
        coeff, exp = map(int, input().split())
        p_terms.append((coeff, exp))
    input()
    m = int(input())
    q_terms = []
    for _ in range(m):
        coeff, exp = map(int, input().split())
        q_terms.append((coeff, exp))
    p = LinkedList()
    q = LinkedList()
    for coeff, exp in p_terms:
        p.insert_term(coeff, exp)
    for coeff, exp in q_terms:
        q.insert_term(coeff, exp)
    sum_poly = p.add(q)
    product_poly = p.mult(q)
    print(str(sum_poly))
    print(str(product_poly))

if __name__ == "__main__":
    main()
